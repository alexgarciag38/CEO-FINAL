---
description: "Directiva Maestra de Calidad y Robustez - CEO Command Center"
globs:
  - "**/*" # Aplica a todos los archivos del proyecto
alwaysApply: true
---

### Directiva Maestra de Calidad y Robustez del CEO Command Center

**A la atención del Agente IA de Cursor:**

Esta directiva establece el estándar de calidad y el protocolo de trabajo innegociable para todo el desarrollo relacionado con el proyecto "CEO Command Center". Tu desempeño será evaluado en base a tu adherencia estricta a estos principios. La velocidad nunca debe comprometer la calidad, la seguridad o la robustez.

---
#### I. Los Mandamientos de Implementación (Inquebrantables)

1.  **Diagnóstico de Causa Raíz, No de Síntomas:** Ante cualquier bug o problema, tu primer paso **no es proponer una solución**. Es presentar un **diagnóstico de la causa raíz**. Debes explicar *por qué* el error está ocurriendo a un nivel fundamental. Queda prohibido aplicar parches superficiales.

2.  **Seguridad por Defecto (Zero Trust):** Cada línea de código que escribas debe asumir que los datos y las intenciones pueden ser maliciosos o erróneos.
    * **Backend (Edge Functions):** TODA función debe, sin excepción, validar el rol del usuario (`admin`, `colaborador`) al inicio. TODA entrada de datos (`body`, `params`) debe ser validada rigurosamente con **Zod**.
    * **Base de Datos:** TODA tabla con datos de usuario debe tener **Políticas de RLS (Row Level Security)** que restrinjan el acceso. La regla es: "negar todo por defecto, permitir explícitamente".

3.  **Robustez y Manejo de Errores Exhaustivo:** La aplicación no puede fallar en silencio ni crashear.
    * **Backend:** Cada operación asíncrona o punto de fallo potencial debe estar envuelto en un bloque `try/catch`. Los errores deben ser capturados, registrados (`console.error`), y devueltos al frontend con un código de estado HTTP apropiado (400, 401, 403, 500) y un mensaje JSON claro.
    * **Frontend:** Cada llamada a una API debe estar envuelta en un `try/catch` y debe manejar explícitamente los estados de **carga (`loading`), éxito (`success`) y error (`error`)** en la UI.

4.  **Soluciones Escalables, No Atajos:** Cada solución debe ser diseñada pensando en el futuro.
    * **Evita Hardcoding:** No uses valores "mágicos". Extráelos a constantes o configuraciones.
    * **Componentes Reutilizables:** Si una pieza de UI o lógica se usa más de una vez, debe convertirse en un componente o hook reutilizable.
    * **Estado Centralizado:** Para lógica compleja, utiliza patrones de estado centralizado (`useReducer` + `Context`).

5.  **Cero Regresiones (No Romper lo que Funciona):** Antes de proponer cualquier cambio, debes realizar un **análisis de impacto**. Debes responder: "¿Qué otras partes del sistema dependen de este código? ¿Cómo me aseguro de que mi cambio no las afectará negativamente?".

---
#### II. Protocolo Operativo Estándar (Cómo Debes Responder)

**Cuando te pida corregir un bug, tu respuesta DEBE seguir esta estructura:**

1.  **Confirmación y Diagnóstico:**
    * "Entendido. He analizado el problema. La **causa raíz** del bug [Nombre del Bug] es [Explicación técnica detallada del porqué]."

2.  **Plan de Solución Holístico:**
    * "Para solucionarlo de forma robusta, propongo los siguientes cambios en cada capa del sistema:"
    * **Base de Datos:** (Si aplica) "Añadiremos/modificaremos [esto]..."
    * **Backend (Edge Function):** "Modificaremos la función `[nombre]` para [hacer esto]..."
    * **Frontend (Componente):** "Refactorizaremos el componente `[nombre]` para [hacer esto]..."

3.  **Análisis de Impacto y Prevención de Regresiones:**
    * "Este cambio podría impactar [otro componente/módulo]. Para evitar problemas, también verificaré y ajustaré [esa otra parte]."

4.  **Implementación (El Prompt Final):**
    * "Aquí está el prompt detallado para ejecutar la solución completa..."

---

Esta directiva no es una sugerencia, es el **estándar operativo para este proyecto**. Cada respuesta tuya debe reflejar este nivel de rigor y pensamiento arquitectónico. La calidad no es negociable.